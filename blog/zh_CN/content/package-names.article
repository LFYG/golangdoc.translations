#Package names
命名的学问
4 Feb 2015
Tags: package, names, style

Sameer Ajmani

* 

.html _tr/div_begin_en.html

* Introduction

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

* 引言

.html _tr/div_end.html

.html _tr/div_begin_en.html

Go code is organized into packages.
Within a package, code can refer to any identifier (name) defined within, while
clients of the package may only reference the package's exported types,
functions, constants, and variables.
Such references always include the package name as a prefix: `foo.Bar` refers to
the exported name `Bar` in the imported package named `foo`.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

Go 代码通过包来组织. 在包内部, 代码可以引用包中定义的任何标识符(名字),
而该包的用户则只能引用其中已导出的类型/函数/常量和变量.
这种引用总是将包名作为前缀: 例如 `foo.Bar` 就引用了已导入包 `foo` 中的已导出名 `Bar`.

.html _tr/div_end.html

.html _tr/div_begin_en.html

Good package names make code better.
A package's name provides context for its contents, making it easier for clients
to understand what the package is for and how to use it.
The name also helps package maintainers determine what does and does not belong
in the package as it evolves.
Well-named packages make it easier to find the code you need.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

好的包名能让代码组织得更好. 包名提供了其内容的上下文, 让用户更容易理解该包的用途和用法.
包名也有助于维护者在该包的演化过程中决定哪些东西属于它, 哪些不属于它.
恰当的包名更易帮你找所需的代码.

.html _tr/div_end.html

.html _tr/div_begin_en.html

Effective Go provides
[[https://golang.org/doc/effective_go.html#names][guidelines]] for naming
packages, types, functions, and variables.
This article expands on that discussion and surveys names found in the standard
library.
It also discusses bad package names and how to fix them.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

实效 Go 编程中提供了一份关于包/类型/函数和变量的
[[/effective_go.html#names][命名指南]].
本文拓展了该指南, 考察了标准库中的命名, 也讨论了不良包名及其改善方法.

.html _tr/div_end.html

.html _tr/div_begin_en.html

* Package names

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

* 包名

.html _tr/div_end.html

.html _tr/div_begin_en.html

Good package names are short and clear.
They are lower case, with no `under_scores` or `mixedCaps`.
They are often simple nouns, such as:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

好的包名应当简短清晰. 它们应该全部小写, 没有下划线 `under_scores` 或混合大小写
`mixedCaps`. 它们通常是简单的名词, 例如:

.html _tr/div_end.html

.html _tr/div_begin_en.html

- `time` (provides functionality for measuring and displaying time)
- `list` (implements a doubly linked list)
- `http` (provides HTTP client and server implementations)

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

- `time` (提供测量和显示时间的功能)
- `list` (实现了双向链表)
- `http` (提供 HTTP 客户端与服务端的实现)

.html _tr/div_end.html

.html _tr/div_begin_en.html

The style of names typical of another language might not be idiomatic in a Go
program.
Here are two examples of names that might be good style in other languages but
do not fit well in Go:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

另一种语言中典型的命名风格在 Go 程序中可能并不惯用.
下面两个例子在其它语言中可能是好的风格, 但在 Go 中不合适:

.html _tr/div_end.html

- `computeServiceClient`
- `priority_queue`

.html _tr/div_begin_en.html

A Go package may export several types and functions.
For example, a `compute` package could export a `Client` type with methods for
using the service as well as functions for partitioning a compute task across
several clients.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

一个Go包可导出多个类型和函数. 例如, 一个 `compute` 包可以导出一个 `Client` 类型,
它包含使用该服务的方法, 以及将一个计算任务划分给多个客户端(`Client`)的函数.

.html _tr/div_end.html

.html _tr/div_begin_en.html

*Abbreviate*judiciously.*
Package names may be abbreviated when the abbreviation is familiar to the
programmer.
Widely-used packages often have compressed names:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

*慎用缩写.*
当程序员对包名缩写比较熟悉时, 可直接采用. 常用包一般都有简短的名字:

.html _tr/div_end.html

.html _tr/div_begin_en.html

- `strconv` (string conversion)
- `syscall` (system call)
- `fmt` (formatted I/O)

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

- `strconv` (字符串转换)
- `syscall` (系统调用)
- `fmt` (格式化 I/O)

.html _tr/div_end.html

.html _tr/div_begin_en.html

On the other hand, if abbreviating a package name makes it ambiguous or unclear,
don't do it.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

反之, 若包名缩写会产生歧义, 那么请勿使用.

.html _tr/div_end.html

.html _tr/div_begin_en.html

*Don't*steal*good*names*from*the*user.*
Avoid giving a package a name that is commonly used in client code.
For example, the buffered I/O package is called `bufio`, not `buf`, since `buf`
is a good variable name for a buffer.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

*别抢走用户的好名字.*
别把用户代码中常用的名字作为包名. 例如, 带缓冲的 I/O 叫做 `bufio` 而非 `buf` ,
因为 `buf` 用做缓冲区是个不错的变量名.

.html _tr/div_end.html

.html _tr/div_begin_en.html

* Naming package contents

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

* 包内容的命名

.html _tr/div_end.html

.html _tr/div_begin_en.html

A package name and its contents' names are coupled, since client code uses them
together.
When designing a package, take the client's point of view.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

包名与其内容的名字是有联系的, 因为用户的代码总是一起使用它们. 当设计一个包时,
请站在用户的角度考虑.

.html _tr/div_end.html

.html _tr/div_begin_en.html

*Avoid*stutter.*
Since client code uses the package name as a prefix when referring to the
package contents, the names for those contents need not repeat the package name.
The HTTP server provided by the `http` package is called `Server`, not
`HTTPServer`.
Client code refers to this type as `http.Server`, so there is no ambiguity.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

*别啰嗦. *
由于用户代码在引用包的内容时会将包名作为前缀, 因此这些内容的名字无需重复包名.
`http` 包提供的 HTTP 服务名为 `http.Server`, 而非 `HTTPServer`. 用户代码通过
`http.Server` 引用该类型, 因此没有歧义.

.html _tr/div_end.html

.html _tr/div_begin_en.html

*Simplify*function*names.*
When a function in package pkg returns a value of type `pkg.Pkg` (or
`*pkg.Pkg`), the function name can often omit the type name without confusion:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

*简化函数名. *
当 `pkg` 包中某个函数的返回值类型为 `pkg.Pkg` (或 `*pkg.Pkg`)时,
函数名就算省略类型名也不会引起混淆.

.html _tr/div_end.html

.html _tr/div_begin_en.html

	start := time.Now()                                  // start is a time.Time
	t, err := time.Parse(time.Kitchen, "6:06PM")         // t is a time.Time
        ctx = context.WithTimeout(ctx, 10*time.Millisecond)  // ctx is a context.Context
        ip, ok := userip.FromContext(ctx)                    // ip is a net.IP

.html _tr/div_end.html

.html _tr/div_begin_en.html

A function named `New` in package `pkg` returns a value of type `pkg.Pkg`.
This is a standard entry point for client code using that type:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

在 `pkg` 包中名为 `New` 的函数会返回一个 `pkg.Pkg` 类型的值.
这是用户代码使用该类型的标准入口点:

.html _tr/div_end.html

.html _tr/div_begin_en.html

         q := list.New()  // q is a *list.List

.html _tr/div_end.html

.html _tr/div_begin_en.html

When a function returns a value of type `pkg.T`, where `T` is not `Pkg`, the
function name may include `T` to make client code easier to understand.
A common situation is a package with multiple New-like functions:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

当函数返回的值类型为 `pkg.T` 且 `T` 不为 `Pkg` 时, 函数名应包含 `T`
以便让用户代码更易理解. 常见的情况是一个包带有多个类似 `New` 的函数:

.html _tr/div_end.html

.html _tr/div_begin_en.html

	d, err := time.ParseDuration("10s")  // d is a time.Duration
	elapsed := time.Since(start)         // elapsed is a time.Duration
	ticker := time.NewTicker(d)          // ticker is a *time.Ticker
	timer := time.NewTimer(d)            // timer is a *time.Timer

.html _tr/div_end.html

.html _tr/div_begin_en.html

Types in different packages can have the same name, because from the client's
point of view such names are discriminated by the package name.
For example, the standard library includes several types named `Reader`,
including `jpeg.Reader`, `bufio.Reader`, and `csv.Reader`.
Each package name fits with `Reader` to yield a good type name.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

不同包中的类型名可以相同, 因为客户端可通过包名区分它们.
例如, 标准库中含有多个名为 `Reader` 的类型, 包括 `jpeg.Reader`/`bufio.Reader`
和 `csv.Reader` . 每个包名搭配 `Reader` 都是个不错的类型名.

.html _tr/div_end.html

.html _tr/div_begin_en.html

If you cannot come up with a package name that's a meaningful prefix for the
package's contents, the package abstraction boundary may be wrong.
Write code that uses your package as a client would, and restructure your
packages if the result seems poor.
This approach will yield packages that are easier for clients to understand and
for the package developers to maintain.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

若你为某个包的内容想不出有意义的前缀包名, 那这个包的抽象边界大概就错了.
请站在用户的角度写你的包的代码, 如果你觉得不太对劲那么请重新组织你的包.
这样得到的包将不仅容易使用, 也容易维护.

.html _tr/div_end.html

.html _tr/div_begin_en.html

* Package paths

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

* 导入路径

.html _tr/div_end.html

.html _tr/div_begin_en.html

A Go package has both a name and a path.
The package name is specified in the package statement of its source files;
client code uses it as the prefix for the package's exported names.
Client code uses the package path when importing the package.
By convention, the last element of the package path is the package name:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

一个 Go 包同时有名称和路径. 包名由其源码文件中的包语句指定,
用户代码将其用作包的已导出名的前缀. 用户代码通过包路径来导入包.
按照约定, 包路径的最后一个元素即为包名:

.html _tr/div_end.html

.html _tr/div_begin_en.html

	import (
		"fmt"                       // package fmt
		"os/exec"                   // package exec
		"golang.org/x/net/context"  // package context
	)

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

构建工具将包路径映射到目录. go 工具通过 [[https://go-zh.org/doc/code.html#GOPATH][GOPATH]]
环境变量在 `$GOPATH/src/github.com/user/hello` 目录中查找路径 `"github.com/user/hello"` 内的源文件.
(这种情况你应该熟悉, 但弄清这些术语和包结构也很重要. )

.html _tr/div_end.html

.html _tr/div_begin_en.html

Build tools map package paths onto directories.
The go tool uses the [[https://golang.org/doc/code.html#GOPATH][GOPATH]]
environment variable to find the source files for path `"github.com/user/hello"`
in directory `$GOPATH/src/github.com/user/hello`.
(This situation should be familiar, of course, but it's important to be clear
about the terminology and structure of packages.)

.html _tr/div_end.html

.html _tr/div_begin_en.html

*Directories.*
The standard library uses like directories `crypto`, `container`, `encoding`,
and `image` to group packages for related protocols and algorithms.
There is no actual relationship among the packages in one of these directories;
a directory just provides a way to arrange the files.
Any package can import any other package provided the import does not create a
cycle.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

*目录. *
标准库使用像 `crypto`/`container`/`encoding`/`image`
之类的目录来为相关的协议和算法包分组. 其中每个目录内的包之间并没有实际的联系,
目录只是为了便于分类文件. 只要不会导致循环引用, 任何包都能导入其它的包.

.html _tr/div_end.html

.html _tr/div_begin_en.html

Just as types in different packages can have the same name without ambiguity,
packages in different directories can have the same name.
For example,
[[https://golang.org/pkg/runtime/pprof][runtime/pprof]] provides profiling data
in the format expected by the [[https://code.google.com/p/gperftools][pprof]]
profiling tool, while [[https://golang.org/pkg/net/http/pprof][net/http/pprof]]
provides HTTP endpoints to present profiling data in this format.
Client code uses the package path to import the package, so there is no
confusion.
If a source file needs to import both `pprof` packages, it can
[[https://golang.org/ref/spec#Import_declarations][rename]] one or both locally.
When renaming an imported package, the local name should follow the same
guidelines as package names (lower case, no `under_scores` or `mixedCaps`).

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

就像不同包中的类型可以同名而不会引起混淆, 不同目录中的包也可以同名.
例如, [[/pkg/runtime/pprof][runtime/pprof]] 提供了
[[https://code.google.com/p/gperftools][pprof]] 剖析工具所需格式的剖析数据,
而 [[/pkg/net/http/pprof][net/http/pprof]]
则提供了按这种格式展示剖析数据的HTTP端点. 用户代码通过包路径导入该包, 因此不会混淆.
若源文件需要导入两个 `pprof` 包, 那么可以局部地将其中之一或二者都
[[/ref/spec#Import_declarations][重命名]]. 在重命名已导入包时,
局部名也应遵循包名的命名准则(小写, 不使用下划线 `under_scores` 或混合大小写 `mixedCaps` ).

.html _tr/div_end.html

.html _tr/div_begin_en.html

* Bad package names

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

* 不良包名

.html _tr/div_end.html

.html _tr/div_begin_en.html

Bad package names make code harder to navigate and maintain.
Here are some guidelines for recognizing and fixing bad names.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

不良包名会让代码难以使用与维护. 下面是一些识别及修复不良包名的准则.

.html _tr/div_end.html

.html _tr/div_begin_en.html

*Avoid*meaningless*package*names.*
Packages named `util`, `common`, or `misc` provide clients with no sense of what
the package contains.
This makes it harder for clients to use the package and makes it harder for
maintainers to keep the package focused.
Over time, they accumulate dependencies that can make compilation significantly
and unnecessarily slower, especially in large programs.
And since such package names are generic, they are more likely to collide with
other packages imported by client code, forcing clients to invent names to
distinguish them.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

*避免无意义的包名. *
名为 `util`/`common`/`misc` 的包不仅无法向用户传达其中的内容, 还会让它们更难以使用,
维护者也不易保持它们的专用性. 如此一来, 依赖关系会日渐复杂, 徒增编译时间, 这在大型程序中尤甚.
由于这类包名过于通用, 因此更易与客户代码中导入的其它包名相冲突, 用户则必须重新取名来加以区分.

.html _tr/div_end.html

.html _tr/div_begin_en.html

*Break*up*generic*packages.*
To fix such packages, look for types and functions with common name elements and
pull them into their own package.
For example, if you have

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

*拆分过于通用的包. *
修复这样的包需要包含通用名元素的类型和函数, 并将它们放到自己的包中. 例如, 若你有以下代码:

.html _tr/div_end.html

.html _tr/div_begin_en.html

	package util
	func NewStringSet(...string) map[string]bool {...}
	func SortStringSet(map[string]bool) []string {...}

.html _tr/div_end.html

.html _tr/div_begin_en.html

then client code looks like

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

那么用户代码看起来会是这样:

.html _tr/div_end.html

.html _tr/div_begin_en.html

	set := util.NewStringSet("c", "a", "b")
	fmt.Println(util.SortStringSet(set))

.html _tr/div_end.html

.html _tr/div_begin_en.html

Pull these functions out of `util` into a new package, choosing a name that fits
the contents:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

将这些函数从 `util` 移至新的包中, 选一个与其内容相称的包名:

.html _tr/div_end.html

.html _tr/div_begin_en.html

	package stringset
	func New(...string) map[string]bool {...}
	func Sort(map[string]bool) []string {...}

.html _tr/div_end.html

.html _tr/div_begin_en.html

then the client code becomes

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

那么用户代码会变成这样:

.html _tr/div_end.html

.html _tr/div_begin_en.html

	set := stringset.New("c", "a", "b")
	fmt.Println(stringset.Sort(set))

.html _tr/div_end.html

.html _tr/div_begin_en.html

Once you've made this change, its easier to see how to improve the new package:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

一旦你做出这些改变, 便更容易看出如何改进新包了:

.html _tr/div_end.html

.html _tr/div_begin_en.html

	package stringset
	type Set map[string]bool
	func New(...string) Set {...}
	func (s Set) Sort() []string {...}

.html _tr/div_end.html

.html _tr/div_begin_en.html

which yields even simpler client code:

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

这样以来用户代码将更加简洁:

.html _tr/div_end.html

.html _tr/div_begin_en.html

	set := stringset.New("c", "a", "b")
	fmt.Println(set.Sort())

.html _tr/div_end.html

.html _tr/div_begin_en.html

The name of the package is a critical piece of its design.
Work to eliminate meaningless package names from your projects.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

名字是设计包的关键. 请从你的项目中努力消除无意义的包名.

.html _tr/div_end.html

.html _tr/div_begin_en.html

*Don't*use*a*single*package*for*all*your*APIs.*
Many well-intentioned programmers put all the interfaces exposed by their
program into a single package named `api`, `types`, or `interfaces`, thinking it
makes it easier to find the entry points to their code base.
This is a mistake.
Such packages suffer from the same problems as those named `util` or `common`,
growing without bound, providing no guidance to users, accumulating
dependencies, and colliding with other imports.
Break them up, perhaps using directories to separate public packages from
implementation.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

*别把所有API都塞进一个包里. *
有些好心的程序员会将他们的程序暴露出的所有接口都放到一个包里, 取名为 `api`/`types` 或
`interfaces` , 他们觉着这样会更易于找到代码库的入口点. 这是不对的. 这种包遭遇到的问题和名为
`util` 或 `common` 的包相同, 即无节制地增长, 不为用户提供指导, 积累依赖, 以及和其它导入冲突.
请拆分它们, 或许可以用目录将公共包从实现中分离出来.

.html _tr/div_end.html

.html _tr/div_begin_en.html

*Avoid*unnecessary*package*name*collisions.*
While packages in different directories may have the same name, packages that
are frequently used together should have distinct names.
This reduces confusion and the need for local renaming in client code.
For the same reason, avoid using the same name as popular standard packages like
`io` or `http`.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

*避免不必要的包名冲突. *
当不同目录中的包名相同时, 经常一起使用的包应该有不同的名字. 这能避免混淆,
减少在用户代码中局部重命名的必要. 同理, 也应当避免将 `io` 或 `http`
之类广泛使用的标准包的名字用作包名.

.html _tr/div_end.html

.html _tr/div_begin_en.html

* Conclusion

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

* 结论

.html _tr/div_end.html

.html _tr/div_begin_en.html

Package names are central to good naming in Go programs.
Take the time to choose good package names and organize your code well.
This helps clients understand and use your packages and helps maintainers to
grow them gracefully.

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

Go 程序的包名是良好命名的核心, 请花点时间选好包名并组织好你的代码,
这能帮助用户理解并使用你的包, 也有助于维护者优雅地发展它们.

.html _tr/div_end.html

.html _tr/div_begin_en.html

* Further reading

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

* 扩展阅读

.html _tr/div_end.html

.html _tr/div_begin_en.html

- [[https://golang.org/doc/effective_go.html][Effective Go]]
- [[https://golang.org/doc/code.html][How to Write Go Code]]
- [[https://blog.golang.org/organizing-go-code][Organizing Go Code (2012 blog post)]]
- [[https://talks.golang.org/2014/organizeio.slide][Organizing Go Code (2014 Google I/O talk)]]

.html _tr/div_end.html

.html _tr/div_begin_zh_CN.html

- [[/doc/effective_go.html][实效 Go 编程]]
- [[/doc/code.html][如何编写 Go 代码]]
- [[/blog/organizing-go-code][组织 Go 代码(2012年的博客)]]
- [[http://talks.golang.org/2014/organizeio.slide][组织 Go 代码(2014年 Google I/O 演讲)]]

.html _tr/div_end.html

