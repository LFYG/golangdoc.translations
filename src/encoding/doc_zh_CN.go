// Copyright The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ingore

// Package encoding defines interfaces shared by other packages that convert data
// to and from byte-level and textual representations. Packages that check for
// these interfaces include encoding/gob, encoding/json, and encoding/xml. As a
// result, implementing an interface once can make a type useful in multiple
// encodings. Standard types that implement these interfaces include time.Time and
// net.IP. The interfaces come in pairs that produce and consume encoded data.

// encoding包定义了供其它包使用的可以将数据在字节水平和文本表示之间转换的接口。encoding/gob、encoding/json、encoding/xml三个包都会检查使用这些接口。因此，只要实现了这些接口一次，就可以在多个包里使用。标准包内建类型time.Time和net.IP都实现了这些接口。接口是成对的，分别产生和还原编码后的数据。
package encoding

// BinaryMarshaler is the interface implemented by an object that can marshal
// itself into a binary form.
//
// MarshalBinary encodes the receiver into a binary form and returns the result.

// 实现了BinaryMarshaler接口的类型可以将自身序列化为binary格式。
type BinaryMarshaler interface {
	MarshalBinary() (data []byte, err error)
}

// BinaryUnmarshaler is the interface implemented by an object that can unmarshal a
// binary representation of itself.
//
// UnmarshalBinary must be able to decode the form generated by MarshalBinary.
// UnmarshalBinary must copy the data if it wishes to retain the data after
// returning.

// 实现了BinaryUnmarshaler接口的类型可以将binary格式表示的自身解序列化。
//
// UnmarshalBinary必须可以解码MarshalBinary生成的binary格式数据。本函数可能会对data内容作出修改，所以如果要保持data的数据请事先进行拷贝。
type BinaryUnmarshaler interface {
	UnmarshalBinary(data []byte) error
}

// TextMarshaler is the interface implemented by an object that can marshal itself
// into a textual form.
//
// MarshalText encodes the receiver into UTF-8-encoded text and returns the result.

// 实现了BinaryMarshaler接口的类型可以将自身序列化为utf-8编码的textual格式。
type TextMarshaler interface {
	MarshalText() (text []byte, err error)
}

// TextUnmarshaler is the interface implemented by an object that can unmarshal a
// textual representation of itself.
//
// UnmarshalText must be able to decode the form generated by MarshalText.
// UnmarshalText must copy the text if it wishes to retain the text after
// returning.

// 实现了TextUnmarshaler接口的类型可以将textual格式表示的自身解序列化。
//
// UnmarshalText必须可以解码MarshalText生成的textual格式数据。本函数可能会对data内容作出修改，所以如果要保持data的数据请事先进行拷贝。
type TextUnmarshaler interface {
	UnmarshalText(text []byte) error
}
