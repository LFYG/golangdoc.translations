// Copyright The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ingore

// Package log implements a simple logging package. It defines a type, Logger,
// with methods for formatting output. It also has a predefined 'standard'
// Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and
// Panic[f|ln], which are easier to use than creating a Logger manually.
// That logger writes to standard error and prints the date and time
// of each logged message.
// The Fatal functions call os.Exit(1) after writing the log message.
// The Panic functions call panic after writing the log message.

// log包实现了简单的日志服务。本包定义了Logger类型，该类型提供了一些格式化输出的
// 方法。本包也提供了一个预定义的“标准”Logger，可以通过辅助函数Print[f|ln]、
// Fatal[f|ln]和Panic[f|ln]访问，比手工创建一个Logger对象更容易使用。Logger会打
// 印每条日志信息的日期、时间，默认输出到标准错误。Fatal系列函数会在写入日志信息
// 后调用os.Exit(1)。Panic系列函数会在写入日志信息后panic。
package log

import (
    "fmt"
    "io"
    "os"
    "runtime"
    "sync"
    "time"
)

// These flags define which text to prefix to each log entry generated by the
// Logger.

// 这些选项定义Logger类型如何生成用于每条日志的前缀文本。
const (
    // Bits or'ed together to control what's printed. There is no control over the
    // order they appear (the order listed here) or the format they present (as
    // described in the comments).  A colon appears after these items:
    //	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
    Ldate         = 1 << iota     // the date: 2009/01/23
    Ltime                         // the time: 01:23:23
    Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
    Llongfile                     // full file name and line number: /a/b/c/d.go:23
    Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
    LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// A Logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.

// Logger类型表示一个活动状态的记录日志的对象，它会生成一行行的输出写入一个
// io.Writer接口。每一条日志操作会调用一次io.Writer接口的Write方法。Logger类型的
// 对象可以被多个线程安全的同时使用，它会保证对io.Writer接口的顺序访问。
type Logger struct {
}

// Fatal is equivalent to Print() followed by a call to os.Exit(1).

// Fatal等价于{Print(v...); os.Exit(1)}
func Fatal(v ...interface{})

// Fatalf is equivalent to Printf() followed by a call to os.Exit(1).

// Fatalf等价于{Printf(v...); os.Exit(1)}
func Fatalf(format string, v ...interface{})

// Fatalln is equivalent to Println() followed by a call to os.Exit(1).

// Fatalln等价于{Println(v...); os.Exit(1)}
func Fatalln(v ...interface{})

// Flags returns the output flags for the standard logger.

// Flags返回标准logger的输出选项。
func Flags() int

// New creates a new Logger.   The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.

// New creates a new Logger. The out variable sets the destination to which log
// data will be written. The prefix appears at the beginning of each generated
// log line. The flag argument defines the logging properties.
func New(out io.Writer, prefix string, flag int) *Logger

// Panic is equivalent to Print() followed by a call to panic().

// Panic等价于{Print(v...); panic(...)}
func Panic(v ...interface{})

// Panicf is equivalent to Printf() followed by a call to panic().

// Panicf等价于{Printf(v...); panic(...)}
func Panicf(format string, v ...interface{})

// Panicln is equivalent to Println() followed by a call to panic().

// Panicln等价于{Println(v...); panic(...)}
func Panicln(v ...interface{})

// Prefix returns the output prefix for the standard logger.

// Prefix返回标准logger的输出前缀。
func Prefix() string

// Print calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Print.

// Print调用Output将生成的格式化字符串输出到标准logger，参数用和fmt.Print相同的
// 方法处理。
func Print(v ...interface{})

// Printf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.

// Printf调用Output将生成的格式化字符串输出到标准logger，参数用和fmt.Printf相同
// 的方法处理。
func Printf(format string, v ...interface{})

// Println calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Println.

// Println调用Output将生成的格式化字符串输出到标准logger，参数用和fmt.Println相
// 同的方法处理。
func Println(v ...interface{})

// SetFlags sets the output flags for the standard logger.

// SetFlags设置标准logger的输出选项。
func SetFlags(flag int)

// SetOutput sets the output destination for the standard logger.

// SetOutput设置标准logger的输出目的地，默认是标准错误输出。
func SetOutput(w io.Writer)

// SetPrefix sets the output prefix for the standard logger.

// SetPrefix设置标准logger的输出前缀。
func SetPrefix(prefix string)

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).
func (*Logger) Fatal(v ...interface{})

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (*Logger) Fatalf(format string, v ...interface{})

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (*Logger) Fatalln(v ...interface{})

// Flags returns the output flags for the logger.
func (*Logger) Flags() int

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.

// Output writes the output for a logging event. The string s contains the text
// to print after the prefix specified by the flags of the Logger. A newline is
// appended if the last character of s is not already a newline. Calldepth is
// used to recover the PC and is provided for generality, although at the moment
// on all pre-defined paths it will be 2.
func (*Logger) Output(calldepth int, s string) error

// Panic is equivalent to l.Print() followed by a call to panic().
func (*Logger) Panic(v ...interface{})

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (*Logger) Panicf(format string, v ...interface{})

// Panicln is equivalent to l.Println() followed by a call to panic().
func (*Logger) Panicln(v ...interface{})

// Prefix returns the output prefix for the logger.
func (*Logger) Prefix() string

// Print calls l.Output to print to the logger. Arguments are handled in the
// manner of fmt.Print.
func (*Logger) Print(v ...interface{})

// Printf calls l.Output to print to the logger. Arguments are handled in the
// manner of fmt.Printf.
func (*Logger) Printf(format string, v ...interface{})

// Println calls l.Output to print to the logger. Arguments are handled in the
// manner of fmt.Println.
func (*Logger) Println(v ...interface{})

// SetFlags sets the output flags for the logger.
func (*Logger) SetFlags(flag int)

// SetPrefix sets the output prefix for the logger.
func (*Logger) SetPrefix(prefix string)

