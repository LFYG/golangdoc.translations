// Copyright The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ingore

// Package log implements a simple logging package. It defines a type, Logger, with
// methods for formatting output. It also has a predefined 'standard' Logger
// accessible through helper functions Print[f|ln], Fatal[f|ln], and Panic[f|ln],
// which are easier to use than creating a Logger manually. That logger writes to
// standard error and prints the date and time of each logged message. The Fatal
// functions call os.Exit(1) after writing the log message. The Panic functions
// call panic after writing the log message.

// Package log implements a simple logging
// package. It defines a type, Logger, with
// methods for formatting output. It also
// has a predefined 'standard' Logger
// accessible through helper functions
// Print[f|ln], Fatal[f|ln], and
// Panic[f|ln], which are easier to use
// than creating a Logger manually. That
// logger writes to standard error and
// prints the date and time of each logged
// message. The Fatal functions call
// os.Exit(1) after writing the log
// message. The Panic functions call panic
// after writing the log message.
package log

// These flags define which text to prefix to each log entry generated by the
// Logger.

// These flags define which text to prefix
// to each log entry generated by the
// Logger.
const (
	// Bits or'ed together to control what's printed. There is no control over the
	// order they appear (the order listed here) or the format they present (as
	// described in the comments).  A colon appears after these items:
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date: 2009/01/23
	Ltime                         // the time: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// Fatal is equivalent to Print() followed by a call to os.Exit(1).

// Fatal is equivalent to Print() followed
// by a call to os.Exit(1).
func Fatal(v ...interface{})

// Fatalf is equivalent to Printf() followed by a call to os.Exit(1).

// Fatalf is equivalent to Printf()
// followed by a call to os.Exit(1).
func Fatalf(format string, v ...interface{})

// Fatalln is equivalent to Println() followed by a call to os.Exit(1).

// Fatalln is equivalent to Println()
// followed by a call to os.Exit(1).
func Fatalln(v ...interface{})

// Flags returns the output flags for the standard logger.

// Flags returns the output flags for the
// standard logger.
func Flags() int

// Panic is equivalent to Print() followed by a call to panic().

// Panic is equivalent to Print() followed
// by a call to panic().
func Panic(v ...interface{})

// Panicf is equivalent to Printf() followed by a call to panic().

// Panicf is equivalent to Printf()
// followed by a call to panic().
func Panicf(format string, v ...interface{})

// Panicln is equivalent to Println() followed by a call to panic().

// Panicln is equivalent to Println()
// followed by a call to panic().
func Panicln(v ...interface{})

// Prefix returns the output prefix for the standard logger.

// Prefix returns the output prefix for the
// standard logger.
func Prefix() string

// Print calls Output to print to the standard logger. Arguments are handled in the
// manner of fmt.Print.

// Print calls Output to print to the
// standard logger. Arguments are handled
// in the manner of fmt.Print.
func Print(v ...interface{})

// Printf calls Output to print to the standard logger. Arguments are handled in
// the manner of fmt.Printf.

// Printf calls Output to print to the
// standard logger. Arguments are handled
// in the manner of fmt.Printf.
func Printf(format string, v ...interface{})

// Println calls Output to print to the standard logger. Arguments are handled in
// the manner of fmt.Println.

// Println calls Output to print to the
// standard logger. Arguments are handled
// in the manner of fmt.Println.
func Println(v ...interface{})

// SetFlags sets the output flags for the standard logger.

// SetFlags sets the output flags for the
// standard logger.
func SetFlags(flag int)

// SetOutput sets the output destination for the standard logger.

// SetOutput sets the output destination
// for the standard logger.
func SetOutput(w io.Writer)

// SetPrefix sets the output prefix for the standard logger.

// SetPrefix sets the output prefix for the
// standard logger.
func SetPrefix(prefix string)

// A Logger represents an active logging object that generates lines of output to
// an io.Writer. Each logging operation makes a single call to the Writer's Write
// method. A Logger can be used simultaneously from multiple goroutines; it
// guarantees to serialize access to the Writer.

// A Logger represents an active logging
// object that generates lines of output to
// an io.Writer. Each logging operation
// makes a single call to the Writer's
// Write method. A Logger can be used
// simultaneously from multiple goroutines;
// it guarantees to serialize access to the
// Writer.
type Logger struct {
	// contains filtered or unexported fields
}

// New creates a new Logger. The out variable sets the destination to which log
// data will be written. The prefix appears at the beginning of each generated log
// line. The flag argument defines the logging properties.

// New creates a new Logger. The out
// variable sets the destination to which
// log data will be written. The prefix
// appears at the beginning of each
// generated log line. The flag argument
// defines the logging properties.
func New(out io.Writer, prefix string, flag int) *Logger

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).

// Fatal is equivalent to l.Print()
// followed by a call to os.Exit(1).
func (l *Logger) Fatal(v ...interface{})

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).

// Fatalf is equivalent to l.Printf()
// followed by a call to os.Exit(1).
func (l *Logger) Fatalf(format string, v ...interface{})

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).

// Fatalln is equivalent to l.Println()
// followed by a call to os.Exit(1).
func (l *Logger) Fatalln(v ...interface{})

// Flags returns the output flags for the logger.

// Flags returns the output flags for the
// logger.
func (l *Logger) Flags() int

// Output writes the output for a logging event. The string s contains the text to
// print after the prefix specified by the flags of the Logger. A newline is
// appended if the last character of s is not already a newline. Calldepth is used
// to recover the PC and is provided for generality, although at the moment on all
// pre-defined paths it will be 2.

// Output writes the output for a logging
// event. The string s contains the text to
// print after the prefix specified by the
// flags of the Logger. A newline is
// appended if the last character of s is
// not already a newline. Calldepth is used
// to recover the PC and is provided for
// generality, although at the moment on
// all pre-defined paths it will be 2.
func (l *Logger) Output(calldepth int, s string) error

// Panic is equivalent to l.Print() followed by a call to panic().

// Panic is equivalent to l.Print()
// followed by a call to panic().
func (l *Logger) Panic(v ...interface{})

// Panicf is equivalent to l.Printf() followed by a call to panic().

// Panicf is equivalent to l.Printf()
// followed by a call to panic().
func (l *Logger) Panicf(format string, v ...interface{})

// Panicln is equivalent to l.Println() followed by a call to panic().

// Panicln is equivalent to l.Println()
// followed by a call to panic().
func (l *Logger) Panicln(v ...interface{})

// Prefix returns the output prefix for the logger.

// Prefix returns the output prefix for the
// logger.
func (l *Logger) Prefix() string

// Print calls l.Output to print to the logger. Arguments are handled in the manner
// of fmt.Print.

// Print calls l.Output to print to the
// logger. Arguments are handled in the
// manner of fmt.Print.
func (l *Logger) Print(v ...interface{})

// Printf calls l.Output to print to the logger. Arguments are handled in the
// manner of fmt.Printf.

// Printf calls l.Output to print to the
// logger. Arguments are handled in the
// manner of fmt.Printf.
func (l *Logger) Printf(format string, v ...interface{})

// Println calls l.Output to print to the logger. Arguments are handled in the
// manner of fmt.Println.

// Println calls l.Output to print to the
// logger. Arguments are handled in the
// manner of fmt.Println.
func (l *Logger) Println(v ...interface{})

// SetFlags sets the output flags for the logger.

// SetFlags sets the output flags for the
// logger.
func (l *Logger) SetFlags(flag int)

// SetPrefix sets the output prefix for the logger.

// SetPrefix sets the output prefix for the
// logger.
func (l *Logger) SetPrefix(prefix string)
