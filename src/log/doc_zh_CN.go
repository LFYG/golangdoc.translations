// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ingore

// Package log implements a simple logging package. It defines a type, Logger,
// with methods for formatting output. It also has a predefined 'standard'
// Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and
// Panic[f|ln], which are easier to use than creating a Logger manually.
// That logger writes to standard error and prints the date and time
// of each logged message.
// The Fatal functions call os.Exit(1) after writing the log message.
// The Panic functions call panic after writing the log message.

// Package log implements a simple logging package. It defines a type, Logger,
// with methods for formatting output. It also has a predefined 'standard'
// Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and
// Panic[f|ln], which are easier to use than creating a Logger manually.
// That logger writes to standard error and prints the date and time
// of each logged message.
// The Fatal functions call os.Exit(1) after writing the log message.
// The Panic functions call panic after writing the log message.
package log

import (
    "fmt"
    "io"
    "os"
    "runtime"
    "sync"
    "time"
)

// These flags define which text to prefix to each log entry generated by the
// Logger.

// These flags define which text to prefix to each log entry generated by the
// Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//     2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//     2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message

	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//     2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//     2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger

)


// A Logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.

// A Logger represents an active logging object that generates lines of
// output to an io.Writer. Each logging operation makes a single call to
// the Writer's Write method. A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu     sync.Mutex // ensures atomic writes; protects the following fields
	prefix string     // prefix to write at beginning of each line
	flag   int        // properties
	out    io.Writer  // destination for output
	buf    []byte     // for accumulating text to write
}


// Fatal is equivalent to Print() followed by a call to os.Exit(1).
func Fatal(v ...interface{})

// Fatalf is equivalent to Printf() followed by a call to os.Exit(1).
func Fatalf(format string, v ...interface{})

// Fatalln is equivalent to Println() followed by a call to os.Exit(1).
func Fatalln(v ...interface{})

// Flags returns the output flags for the standard logger.
func Flags() int

// New creates a new Logger.   The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.

// New creates a new Logger. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func New(out io.Writer, prefix string, flag int) *Logger

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is the count of the number of
// frames to skip when computing the file name and line number
// if Llongfile or Lshortfile is set; a value of 1 will print the details
// for the caller of Output.

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is the count of the number of
// frames to skip when computing the file name and line number
// if Llongfile or Lshortfile is set; a value of 1 will print the details
// for the caller of Output.
func Output(calldepth int, s string) error

// Panic is equivalent to Print() followed by a call to panic().
func Panic(v ...interface{})

// Panicf is equivalent to Printf() followed by a call to panic().
func Panicf(format string, v ...interface{})

// Panicln is equivalent to Println() followed by a call to panic().
func Panicln(v ...interface{})

// Prefix returns the output prefix for the standard logger.
func Prefix() string

// Print calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Print.
func Print(v ...interface{})

// Printf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Printf(format string, v ...interface{})

// Println calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Println.
func Println(v ...interface{})

// SetFlags sets the output flags for the standard logger.
func SetFlags(flag int)

// SetOutput sets the output destination for the standard logger.
func SetOutput(w io.Writer)

// SetPrefix sets the output prefix for the standard logger.
func SetPrefix(prefix string)

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).
func (*Logger) Fatal(v ...interface{})

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (*Logger) Fatalf(format string, v ...interface{})

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (*Logger) Fatalln(v ...interface{})

// Flags returns the output flags for the logger.
func (*Logger) Flags() int

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (*Logger) Output(calldepth int, s string) error

// Panic is equivalent to l.Print() followed by a call to panic().
func (*Logger) Panic(v ...interface{})

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (*Logger) Panicf(format string, v ...interface{})

// Panicln is equivalent to l.Println() followed by a call to panic().
func (*Logger) Panicln(v ...interface{})

// Prefix returns the output prefix for the logger.
func (*Logger) Prefix() string

// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (*Logger) Print(v ...interface{})

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (*Logger) Printf(format string, v ...interface{})

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (*Logger) Println(v ...interface{})

// SetFlags sets the output flags for the logger.
func (*Logger) SetFlags(flag int)

// SetOutput sets the output destination for the logger.
func (*Logger) SetOutput(w io.Writer)

// SetPrefix sets the output prefix for the logger.
func (*Logger) SetPrefix(prefix string)

