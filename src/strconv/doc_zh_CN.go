// Copyright The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ingore

// Package strconv implements conversions to and from string representations of
// basic data types.
//
//
// Numeric Conversions
//
// The most common numeric conversions are Atoi (string to int) and Itoa (int to
// string).
//
//     i, err := strconv.Atoi("-42")
//     s := strconv.Itoa(-42)
//
// These assume decimal and the Go int type.
//
// ParseBool, ParseFloat, ParseInt, and ParseUint convert strings to values:
//
//     b, err := strconv.ParseBool("true")
//     f, err := strconv.ParseFloat("3.1415", 64)
//     i, err := strconv.ParseInt("-42", 10, 64)
//     u, err := strconv.ParseUint("42", 10, 64)
//
// The parse functions return the widest type (float64, int64, and uint64), but
// if the size argument specifies a narrower width the result can be converted
// to that narrower type without data loss:
//
//     s := "2147483647" // biggest int32
//     i64, err := strconv.ParseInt(s, 10, 32)
//     ...
//     i := int32(i64)
//
// FormatBool, FormatFloat, FormatInt, and FormatUint convert values to strings:
//
//     s := strconv.FormatBool(true)
//     s := strconv.FormatFloat(3.1415, 'E', -1, 64)
//     s := strconv.FormatInt(-42, 16)
//     s := strconv.FormatUint(42, 16)
//
// AppendBool, AppendFloat, AppendInt, and AppendUint are similar but append the
// formatted value to a destination slice.
//
//
// String Conversions
//
// Quote and QuoteToASCII convert strings to quoted Go string literals. The
// latter guarantees that the result is an ASCII string, by escaping any
// non-ASCII Unicode with \u:
//
//     q := Quote("Hello, 世界")
//     q := QuoteToASCII("Hello, 世界")
//
// QuoteRune and QuoteRuneToASCII are similar but accept runes and return quoted
// Go rune literals.
//
// Unquote and UnquoteChar unquote Go string and rune literals.

// strconv包实现了基本数据类型和其字符串表示的相互转换。
package strconv

import (
	"errors"
	"math"
	"unicode/utf8"
)

// IntSize is the size in bits of an int or uint value.

// IntSize是int或uint类型的字位数。
const IntSize = intSize

// ErrRange indicates that a value is out of range for the target type.

// ErrRange表示超出目标类型表示范围。
var ErrRange = errors.New("value out of range")

// ErrSyntax indicates that a value does not have the right syntax for the
// target type.

// ErrSyntax表示不符合目标类型语法。
var ErrSyntax = errors.New("invalid syntax")

// A NumError records a failed conversion.

// NumError表示一次失败的转换。
type NumError struct {
	Func string // the failing function (ParseBool, ParseInt, ParseUint, ParseFloat)
	Num  string // the input
	Err  error  // the reason the conversion failed (ErrRange, ErrSyntax)
}

// AppendBool appends "true" or "false", according to the value of b,
// to dst and returns the extended buffer.

// 等价于append(dst, FormatBool(b)...)
func AppendBool(dst []byte, b bool) []byte

// AppendFloat appends the string form of the floating-point number f,
// as generated by FormatFloat, to dst and returns the extended buffer.

// 等价于append(dst, FormatFloat(f, fmt, prec, bitSize)...)
func AppendFloat(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte

// AppendInt appends the string form of the integer i,
// as generated by FormatInt, to dst and returns the extended buffer.

// 等价于append(dst, FormatInt(I, base)...)
func AppendInt(dst []byte, i int64, base int) []byte

// AppendQuote appends a double-quoted Go string literal representing s,
// as generated by Quote, to dst and returns the extended buffer.

// 等价于append(dst, Quote(s)...)
func AppendQuote(dst []byte, s string) []byte

// AppendQuoteRune appends a single-quoted Go character literal representing the
// rune, as generated by QuoteRune, to dst and returns the extended buffer.

// 等价于append(dst, QuoteRune(r)...)
func AppendQuoteRune(dst []byte, r rune) []byte

// AppendQuoteRuneToASCII appends a single-quoted Go character literal
// representing the rune, as generated by QuoteRuneToASCII, to dst and returns
// the extended buffer.

// 等价于append(dst, QuoteRuneToASCII(r)...)
func AppendQuoteRuneToASCII(dst []byte, r rune) []byte

// AppendQuoteToASCII appends a double-quoted Go string literal representing s,
// as generated by QuoteToASCII, to dst and returns the extended buffer.

// 等价于append(dst, QuoteToASCII(s)...)
func AppendQuoteToASCII(dst []byte, s string) []byte

// AppendUint appends the string form of the unsigned integer i,
// as generated by FormatUint, to dst and returns the extended buffer.

// 等价于append(dst, FormatUint(I, base)...)
func AppendUint(dst []byte, i uint64, base int) []byte

// Atoi is shorthand for ParseInt(s, 10, 0).

// Atoi是ParseInt(s, 10, 0)的简写。
func Atoi(s string) (i int, err error)

// CanBackquote reports whether the string s can be represented
// unchanged as a single-line backquoted string without control
// characters other than tab.

// 返回字符串s是否可以不被修改的表示为一个单行的、没有空格和tab之外控制字符的反
// 引号字符串。
func CanBackquote(s string) bool

// FormatBool returns "true" or "false" according to the value of b

// 根据b的值返回"true"或"false"。
func FormatBool(b bool) string

// FormatFloat converts the floating-point number f to a string,
// according to the format fmt and precision prec.  It rounds the
// result assuming that the original was obtained from a floating-point
// value of bitSize bits (32 for float32, 64 for float64).
//
// The format fmt is one of
// 'b' (-ddddp±ddd, a binary exponent),
// 'e' (-d.dddde±dd, a decimal exponent),
// 'E' (-d.ddddE±dd, a decimal exponent),
// 'f' (-ddd.dddd, no exponent),
// 'g' ('e' for large exponents, 'f' otherwise), or
// 'G' ('E' for large exponents, 'f' otherwise).
//
// The precision prec controls the number of digits
// (excluding the exponent) printed by the 'e', 'E', 'f', 'g', and 'G' formats.
// For 'e', 'E', and 'f' it is the number of digits after the decimal point.
// For 'g' and 'G' it is the total number of digits.
// The special precision -1 uses the smallest number of digits
// necessary such that ParseFloat will return f exactly.

// 函数将浮点数表示为字符串并返回。
//
// bitSize表示f的来源类型（32：float32、64：float64），会据此进行舍入。
//
// fmt表示格式：'f'（-ddd.dddd）、'b'（-ddddp±ddd，指数为二进制）、'e'（
// -d.dddde±dd，十进制指数）、'E'（-d.ddddE±dd，十进制指数）、'g'（指数很大时用
// 'e'格式，否则'f'格式）、'G'（指数很大时用'E'格式，否则'f'格式）。
//
// prec控制精度（排除指数部分）：对'f'、'e'、'E'，它表示小数点后的数字个数；对
// 'g'、'G'，它控制总的数字个数。如果prec 为-1，则代表使用最少数量的、但又必需的
// 数字来表示f。
func FormatFloat(f float64, fmt byte, prec, bitSize int) string

// FormatInt returns the string representation of i in the given base,
// for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z'
// for digit values >= 10.

// 返回i的base进制的字符串表示。base
// 必须在2到36之间，结果中会使用小写字母'a'到'z'表示大于10的数字。
func FormatInt(i int64, base int) string

// FormatUint returns the string representation of i in the given base,
// for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z'
// for digit values >= 10.

// 是FormatInt的无符号整数版本。
func FormatUint(i uint64, base int) string

// IsPrint reports whether the rune is defined as printable by Go, with
// the same definition as unicode.IsPrint: letters, numbers, punctuation,
// symbols and ASCII space.

// 返回一个字符是否是可打印的，和unicode.IsPrint一样，r必须是：字母（广义）、数
// 字、标点、符号、ASCII空格。
func IsPrint(r rune) bool

// Itoa is shorthand for FormatInt(int64(i), 10).

// Itoa是FormatInt(i, 10) 的简写。
func Itoa(i int) string

// ParseBool returns the boolean value represented by the string.
// It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False.
// Any other value returns an error.

// 返回字符串表示的bool值。它接受1、0、t、f、T、F、true、false、True、False、
// TRUE、FALSE；否则返回错误。
func ParseBool(str string) (value bool, err error)

// ParseFloat converts the string s to a floating-point number with the
// precision specified by bitSize: 32 for float32, or 64 for float64. When
// bitSize=32, the result still has type float64, but it will be convertible to
// float32 without changing its value.
//
// If s is well-formed and near a valid floating point number, ParseFloat
// returns the nearest floating point number rounded using IEEE754 unbiased
// rounding.
//
// The errors that ParseFloat returns have concrete type *NumError and include
// err.Num = s.
//
// If s is not syntactically well-formed, ParseFloat returns err.Err =
// ErrSyntax.
//
// If s is syntactically well-formed but is more than 1/2 ULP away from the
// largest floating point number of the given size, ParseFloat returns f = ±Inf,
// err.Err = ErrRange.

// 解析一个表示浮点数的字符串并返回其值。
//
// 如果s合乎语法规则，函数会返回最为接近s表示值的一个浮点数（使用IEEE754规范舍入
// ）。bitSize指定了期望的接收类型，32是float32（返回值可以不改变精确值的赋值给
// float32），64是float64；返回值err是*NumErr类型的，语法有误的，
// err.Error=ErrSyntax；结果超出表示范围的，返回值f为±Inf，err.Error= ErrRange。
func ParseFloat(s string, bitSize int) (f float64, err error)

// ParseInt interprets a string s in the given base (2 to 36) and
// returns the corresponding value i.  If base == 0, the base is
// implied by the string's prefix: base 16 for "0x", base 8 for
// "0", and base 10 otherwise.
//
// The bitSize argument specifies the integer type
// that the result must fit into.  Bit sizes 0, 8, 16, 32, and 64
// correspond to int, int8, int16, int32, and int64.
//
// The errors that ParseInt returns have concrete type *NumError
// and include err.Num = s.  If s is empty or contains invalid
// digits, err.Err = ErrSyntax and the returned value is 0;
// if the value corresponding to s cannot be represented by a
// signed integer of the given size, err.Err = ErrRange and the
// returned value is the maximum magnitude integer of the
// appropriate bitSize and sign.

// 返回字符串表示的整数值，接受正负号。
//
// base指定进制（2到36），如果base为0，则会从字符串前置判断，"0x"是16进制，"0"是
// 8进制，否则是10进制；
//
// bitSize指定结果必须能无溢出赋值的整数类型，0、8、16、32、64 分别代表 int、
// int8、int16、int32、int64；返回的err是*NumErr类型的，如果语法有误，err.Error
// = ErrSyntax；如果结果超出类型范围err.Error = ErrRange。
func ParseInt(s string, base int, bitSize int) (i int64, err error)

// ParseUint is like ParseInt but for unsigned numbers.

// ParseUint类似ParseInt但不接受正负号，用于无符号整型。
func ParseUint(s string, base int, bitSize int) (n uint64, err error)

// Quote returns a double-quoted Go string literal representing s.  The
// returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
// control characters and non-printable characters as defined by
// IsPrint.

// 返回字符串s在go语法下的双引号字面值表示，控制字符、不可打印字符会进行转义。（
// 如\t，\n，\xFF，\u0100）
func Quote(s string) string

// QuoteRune returns a single-quoted Go character literal representing the
// rune. The returned string uses Go escape sequences (\t, \n, \xFF, \u0100)
// for control characters and non-printable characters as defined by IsPrint.

// 返回字符r在go语法下的单引号字面值表示，控制字符、不可打印字符会进行转义。（如
// \t，\n，\xFF，\u0100）
func QuoteRune(r rune) string

// QuoteRuneToASCII returns a single-quoted Go character literal representing
// the rune. The returned string uses Go escape sequences (\t, \n, \xFF,
// \u0100) for non-ASCII characters and non-printable characters as defined
// by IsPrint.

// 返回字符r在go语法下的单引号字面值表示，控制字符、不可打印字符、非ASCII字符会
// 进行转义。
func QuoteRuneToASCII(r rune) string

// QuoteToASCII returns a double-quoted Go string literal representing s.
// The returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
// non-ASCII characters and non-printable characters as defined by IsPrint.

// 返回字符串s在go语法下的双引号字面值表示，控制字符和不可打印字符、非ASCII字符
// 会进行转义。
func QuoteToASCII(s string) string

// Unquote interprets s as a single-quoted, double-quoted,
// or backquoted Go string literal, returning the string value
// that s quotes.  (If s is single-quoted, it would be a Go
// character literal; Unquote returns the corresponding
// one-character string.)

// 函数假设s是一个单引号、双引号、反引号包围的go语法字符串，解析它并返回它表示的
// 值。（如果是单引号括起来的，函数会认为s是go字符字面值，返回一个单字符的字符串
// ）
func Unquote(s string) (t string, err error)

// UnquoteChar decodes the first character or byte in the escaped string or
// character literal represented by the string s. It returns four values:
//
//     1) value, the decoded Unicode code point or byte value;
//     2) multibyte, a boolean indicating whether the decoded character requires a multibyte UTF-8 representation;
//     3) tail, the remainder of the string after the character; and
//     4) an error that will be nil if the character is syntactically valid.
//
// The second argument, quote, specifies the type of literal being parsed and
// therefore which escaped quote character is permitted. If set to a single
// quote, it permits the sequence \' and disallows unescaped '. If set to a
// double quote, it permits \" and disallows unescaped ". If set to zero, it
// does not permit either escape and allows both quote characters to appear
// unescaped.

// 函数假设s是一个表示字符的go语法字符串，解析它并返回四个值：
//
//     1) value，表示一个rune值或者一个byte值
//     2) multibyte，表示value是否是一个多字节的utf-8字符
//     3) tail，表示字符串剩余的部分
//     4) err，表示可能存在的语法错误
//
// quote参数为单引号时，函数认为单引号是语法字符，不接受未转义的单引号；双引号时
// ，函数认为双引号是语法字符，不接受未转义的双引号；如果是零值，函数把单引号和
// 双引号当成普通字符。
func UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error)

func (*NumError) Error() string
