{
	"std": {
		"type": "doc_zh_CN.go",
		"repo": "golang-china/golangdoc.translations/src",
		"list": {
			"archive/tar": "tar包实现了tar格式压缩文件的存取.",
			"archive/zip": "zip包提供了zip档案文件的读写服务.",
			"bufio": "bufio 包实现了带缓存的I/O操作.",
			"builtin": "builtin 包为Go的预声明标识符提供了文档.",
			"bytes": "bytes 包实现了操作 byte 切片的常用函数.",
			"cmd/addr2line": "Addr2line is a minimal simulation of the GNU addr2line tool, just enough to support pprof.",
			"cmd/cgo": "Cgo enables the creation of Go packages that call C code.",
			"cmd/cover": "Cover is a program for analyzing the coverage profiles generated by 'go test -coverprofile=cover.out'.",
			"cmd/dist": "",
			"cmd/fix": "Fix finds Go programs that use old APIs and rewrites them to use newer ones.",
			"cmd/go": "Go is a tool for managing Go source code.",
			"cmd/godoc": "Godoc extracts and generates documentation for Go programs.",
			"cmd/gofmt": "Gofmt formats Go programs.",
			"cmd/internal/goobj": "Package goobj implements reading of Go object files and archives.",
			"cmd/internal/objfile": "Package objfile implements portable access to OS-specific executable files.",
			"cmd/link": "TODO(rsc): Handle go.typelink, go.track symbols.",
			"cmd/nm": "Nm lists the symbols defined or used by an object file, archive, or executable.",
			"cmd/objdump": "Objdump disassembles executable files.",
			"cmd/pack": "Pack is a simple version of the traditional Unix ar tool.",
			"cmd/pprof": "Pprof interprets and displays profiles of Go programs.",
			"cmd/pprof/internal/commands": "Package commands defines and manages the basic pprof commands",
			"cmd/pprof/internal/driver": "Package driver implements the core pprof functionality.",
			"cmd/pprof/internal/fetch": "Package fetch provides an extensible mechanism to fetch a profile from a data source.",
			"cmd/pprof/internal/plugin": "Package plugin defines the plugin implementations that the main pprof driver requires.",
			"cmd/pprof/internal/profile": "Implements methods to filter samples from profiles.",
			"cmd/pprof/internal/report": "Package report summarizes a performance profile into a human-readable report.",
			"cmd/pprof/internal/svg": "Package svg provides tools related to handling of SVG files",
			"cmd/pprof/internal/symbolizer": "Package symbolizer provides a routine to populate a profile with symbol, file and line number information.",
			"cmd/pprof/internal/symbolz": "Package symbolz symbolizes a profile using the output from the symbolz service.",
			"cmd/pprof/internal/tempfile": "Package tempfile provides tools to create and delete temporary files",
			"cmd/vet": "Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string.",
			"cmd/yacc": "Yacc is a version of yacc for Go.",
			"compress/bzip2": "bzip2 包实现 bzip2 的解压缩.",
			"compress/flate": "flate 包实现了 deflate 压缩数据格式, 参见RFC 1951.",
			"compress/gzip": "gzip 包实现了 gzip 格式压缩文件的读写, 参见RFC 1952.",
			"compress/lzw": "lzw 包实现了 Lempel-Ziv-Welch 数据压缩格式, 这是一种 T. A. Welch 在 ``A Technique for High-Performance Data Compression'' 一文(Computer, 17(6) (June 1984), pp 8-19) 提出的一种压缩格式.",
			"compress/zlib": "zlib 包实现了对 zlib 格式压缩数据的读写, 参见 RFC 1950.",
			"container/heap": "heap包提供了对任意类型（实现了heap.Interface接口）的堆操作。",
			"container/list": "list包实现了双向链表。",
			"container/ring": "ring实现了环形链表的操作。",
			"crypto": "crypto包搜集了常用的密码（算法）常量。",
			"crypto/aes": "aes包实现了AES加密算法，参见U.S. Federal Information Processing Standards Publication 197。",
			"crypto/cipher": "cipher包实现了多个标准的用于包装底层块加密算法的加密算法实现。",
			"crypto/des": "des包实现了DES标准和TDEA算法，参见U.S. Federal Information Processing Standards Publication 46-3。",
			"crypto/dsa": "Package dsa implements the Digital Signature Algorithm, as defined in FIPS 186-3.",
			"crypto/ecdsa": "Package ecdsa implements the Elliptic Curve Digital Signature Algorithm, as defined in FIPS 186-3.",
			"crypto/elliptic": "elliptic包实现了几条覆盖素数有限域的标准椭圆曲线。",
			"crypto/hmac": "hmac包实现了U.S. Federal Information Processing Standards Publication 198规定的HMAC（加密哈希信息认证码）。",
			"crypto/md5": "md5 包实现了在 RFC 1321 中定义的 MD5 哈希算法.",
			"crypto/rand": "rand包实现了用于加解密的更安全的随机数生成器。",
			"crypto/rc4": "rc4包实现了RC4加密算法，参见Bruce Schneier's Applied Cryptography。",
			"crypto/rsa": "rsa包实现了PKCS#1规定的RSA加密算法。",
			"crypto/sha1": "sha1包实现了SHA1哈希算法，参见RFC 3174。",
			"crypto/sha256": "sha256包实现了SHA224和SHA256哈希算法，参见FIPS 180-4。",
			"crypto/sha512": "sha512包实现了SHA384和SHA512哈希算法，参见FIPS 180-2。",
			"crypto/subtle": "Package subtle implements functions that are often useful in cryptographic code but require careful thought to use correctly.",
			"crypto/tls": "tls包实现了TLS 1.2，细节参见RFC 5246。",
			"crypto/x509": "x509包解析X.509编码的证书和密钥。",
			"crypto/x509/pkix": "pkix包提供了共享的、低层次的结构体，用于ASN.1解析和X.509证书、CRL、OCSP的序列化。",
			"database/sql": "sql 包提供了通用的SQL（或类SQL）数据库接口.",
			"database/sql/driver": "driver包定义了应被数据库驱动实现的接口，这些接口会被sql包使用。",
			"debug/dwarf": "Package dwarf provides access to DWARF debugging information loaded from executable files, as defined in the DWARF 2.0 Standard at http://dwarfstd.org/doc/dwarf-2.0.0.pdf",
			"debug/elf": "Package elf implements access to ELF object files.",
			"debug/gosym": "Package gosym implements access to the Go symbol and line number tables embedded in Go binaries generated by the gc compilers.",
			"debug/macho": "Package macho implements access to Mach-O object files.",
			"debug/pe": "Package pe implements access to PE (Microsoft Windows Portable Executable) files.",
			"debug/plan9obj": "Package plan9obj implements access to Plan 9 a.out object files.",
			"encoding": "encoding包定义了供其它包使用的可以将数据在字节水平和文本表示之间转换的接口。",
			"encoding/ascii85": "ascii85 包是对 ascii85 的数据编码的实现.",
			"encoding/asn1": "asn1包实现了DER编码的ASN.1数据结构的解析，参见ITU-T Rec X.690。",
			"encoding/base32": "base32包实现了RFC 4648规定的base32编码。",
			"encoding/base64": "base64实现了RFC 4648规定的base64编码。",
			"encoding/binary": "binary包实现了简单的数字与字节序列的转换以及变长值的编解码。",
			"encoding/csv": "csv读写逗号分隔值（csv）的文件。",
			"encoding/gob": "gob包管理gob流——在编码器（发送器）和解码器（接受器）之间交换的binary值。",
			"encoding/hex": "hex包实现了16进制字符表示的编解码。",
			"encoding/json": "json包实现了json对象的编解码，参见RFC 4627。",
			"encoding/pem": "pem包实现了PEM数据编码（源自保密增强邮件协议）。",
			"encoding/xml": "Package xml implements a simple XML 1.0 parser that understands XML name spaces.",
			"errors": "error 包实现了用于错误处理的函数.",
			"expvar": "expvar包提供了公共变量的标准接口，如服务的操作计数器。",
			"flag": "flag 包实现命令行标签解析.",
			"fmt": "fmt 包实现了格式化I/O函数，类似于C的 printf 和 scanf.",
			"go/ast": "ast 包声明了用于描述 Go packages 语法树的类型.",
			"go/build": "Package build gathers information about Go packages.",
			"go/doc": "Package doc extracts source code documentation from a Go AST.",
			"go/format": "Package format implements standard formatting of Go source.",
			"go/parser": "Package parser implements a parser for Go source files.",
			"go/printer": "Package printer implements printing of AST nodes.",
			"go/scanner": "Package scanner implements a scanner for Go source text.",
			"go/token": "token 包定义了表示 Go 编程语言词法的和基础运算符的常量标记.",
			"golang.org/x/image/bmp": "bmp 包实现了 BMP 图像格式的编码器和解码器.",
			"golang.org/x/image/draw": "Package draw provides image composition functions.",
			"golang.org/x/image/math/f32": "Package f32 implements float32 vector and matrix types.",
			"golang.org/x/image/math/f64": "Package f64 implements float64 vector and matrix types.",
			"golang.org/x/image/riff": "Package riff implements the Resource Interchange File Format, used by media formats such as AVI, WAVE and WEBP.",
			"golang.org/x/image/tiff": "tiff 包实现了 TIFF 图像格式的编码器和解码器.",
			"golang.org/x/image/tiff/lzw": "Package lzw implements the Lempel-Ziv-Welch compressed data format, described in T. A. Welch, ``A Technique for High-Performance Data Compression'', Computer, 17(6) (June 1984), pp 8-19.",
			"golang.org/x/image/vp8": "Package vp8 implements a decoder for the VP8 lossy image format.",
			"golang.org/x/image/vp8l": "Package vp8l implements a decoder for the VP8L lossless image format.",
			"golang.org/x/image/webp": "webp 包实现了 WEBP 图像格式的解码器.",
			"golang.org/x/image/webp/nycbcra": "Package nycbcra provides non-alpha-premultiplied Y'CbCr-with-alpha image and color types.",
			"golang.org/x/tools/go/ast/astutil": "astutil 包包含工作于 Go AST 的常见实用工具.",
			"hash": "Package hash provides interfaces for hash functions.",
			"hash/adler32": "adler32包实现了Adler-32校验和算法，参见RFC 1950： Adler-32由两个每字节累积的和组成： s1是所有字节的累积，s2是所有s1的累积。",
			"hash/crc32": "crc32包实现了32位循环冗余校验（CRC-32）的校验和算法，参见： http://en.wikipedia.org/wiki/Cyclic_redundancy_check",
			"hash/crc64": "Package crc64 implements the 64-bit cyclic redundancy check, or CRC-64, checksum.",
			"hash/fnv": "fnv包实现了FNV-1和FNV-1a（非加密hash函数），算法参见： http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function",
			"html": "html包提供了用于转义和解转义HTML文本的函数。",
			"html/template": "template包（html/template）实现了数据驱动的模板，用于生成可对抗代码注入的安全HTML输出。",
			"image": "image实现了基本的2D图片库。",
			"image/color": "color 包实现了基本的颜色库。",
			"image/color/palette": "palette包提供了标准的调色板。",
			"image/draw": "draw 包提供组装图片的方法.",
			"image/gif": "gif 包实现了GIF图片的解码.",
			"image/jpeg": "jpeg包实现了jpeg格式图像的编解码。",
			"image/png": "png 包实现了PNG图像的编码和解码.",
			"index/suffixarray": "suffixarrayb包通过使用内存中的后缀树实现了对数级时间消耗的子字符串搜索。",
			"io": "io 包为I/O原语提供了基础的接口.",
			"io/ioutil": "ioutil 实现了一些I/O的工具函数。",
			"log": "log包实现了简单的日志服务。",
			"log/syslog": "Package syslog provides a simple interface to the system log service.",
			"math": "math 包提供了基本常数和数学函数。",
			"math/big": "big 包实现了（大数的）高精度运算.",
			"math/cmplx": "cmplx 包为复数提供了基本的常量和数学函数.",
			"math/rand": "rand 包实现了伪随机数生成器.",
			"mime": "mime实现了MIME的部分规定。",
			"mime/internal/quotedprintable": "",
			"mime/multipart": "multipart实现了MIME的multipart解析，参见RFC 2046。",
			"net": "net包提供了可移植的网络I/O接口，包括TCP/IP、UDP、域名解析和Unix域socket。",
			"net/http": "http包提供了HTTP客户端和服务端的实现。",
			"net/http/cgi": "cgi 包实现了RFC3875协议描述的CGI（公共网关接口）.",
			"net/http/cookiejar": "cookiejar包实现了保管在内存中的符合RFC 6265标准的http.CookieJar接口。",
			"net/http/fcgi": "fcgi 包实现了FastCGI协议.",
			"net/http/httptest": "httptest 包提供HTTP测试的单元工具.",
			"net/http/httputil": "Package httputil provides HTTP utility functions, complementing the more common ones in the net/http package.",
			"net/http/internal": "internal 包含 net/http 和 net/http/httputil 共享的 HTTP 内部函数.",
			"net/http/pprof": "pprof 包通过提供HTTP服务返回runtime的统计数据，这个数据是以pprof可视化工具规定的返回格式返回的.",
			"net/mail": "mail 包实现了解析邮件消息的功能.",
			"net/rpc": "rpc 包提供了一个方法来通过网络或者其他的I/O连接进入对象的外部方法.",
			"net/rpc/jsonrpc": "jsonrpc 包使用了rpc的包实现了一个JSON-RPC的客户端解码器和服务端的解码器.",
			"net/smtp": "smtp包实现了简单邮件传输协议（SMTP），参见RFC 5321。",
			"net/textproto": "textproto实现了对基于文本的请求/回复协议的一般性支持，包括HTTP、NNTP和SMTP。",
			"net/url": "url包解析URL并实现了查询的逸码，参见RFC 3986。",
			"os": "os包提供了操作系统函数的不依赖平台的接口。",
			"os/exec": "exec包执行外部命令。",
			"os/signal": "signal包实现了对输入信号的访问。",
			"os/user": "user包允许通过名称或ID查询用户帐户。",
			"path": "path实现了对斜杠分隔的路径的实用操作函数。",
			"path/filepath": "filepath包实现了兼容各操作系统的文件路径的实用操作函数。",
			"reflect": "reflect包实现了运行时反射，允许程序操作任意类型的对象。",
			"regexp": "regexp包实现了正则表达式搜索。",
			"regexp/syntax": "Package syntax parses regular expressions into parse trees and compiles parse trees into programs.",
			"runtime": "TODO(osc): 需更新 runtime 包含与Go的运行时系统进行交互的操作，例如用于控制Go程的函数.",
			"runtime/cgo": "cgo 包含有 cgo 工具生成的代码的运行时支持.",
			"runtime/debug": "debug 包含有程序在运行时调试其自身的功能.",
			"runtime/pprof": "pprof 包按照可视化工具 pprof 所要求的格式写出运行时分析数据.",
			"runtime/race": "race 包实现了数据竞争检测逻辑.",
			"sort": "sort 包为切片及用户定义的集合的排序操作提供了原语.",
			"strconv": "strconv包实现了基本数据类型和其字符串表示的相互转换。",
			"strings": "strings包实现了用于操作字符的简单函数。",
			"sync": "sync 包提供了互斥锁这类的基本的同步原语.",
			"sync/atomic": "atomic 包提供了底层的原子性内存原语，这对于同步算法的实现很有用.",
			"testing": "Package testing provides support for automated testing of Go packages.",
			"testing/iotest": "Package iotest implements Readers and Writers useful mainly for testing.",
			"testing/quick": "Package quick implements utility functions to help with black box testing.",
			"text/scanner": "Package scanner provides a scanner and tokenizer for UTF-8-encoded text.",
			"text/tabwriter": "tabwriter包实现了写入过滤器（tabwriter.Writer），可以将输入的缩进修正为正确的对齐文本。",
			"text/template": "template包实现了数据驱动的用于生成文本输出的模板。",
			"text/template/parse": "Package parse builds parse trees for templates as defined by text/template and html/template.",
			"time": "time包提供了时间的显示和测量用的函数。",
			"unicode": "unicode 包提供了一些测试Unicode码点属性的数据和函数.",
			"unicode/utf16": "utf16 包实现了对UTF-16序列的编码和解码。",
			"unicode/utf8": "utf8 包实现了支持UTF-8文本编码的函数和常量.",
			"unsafe": "unsafe 包含有关于Go程序类型安全的所有操作."
		}
	}
}